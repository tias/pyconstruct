
{% from 'globals.pmzn' import INT_SET, FLOAT_SET %}


{% macro feature_set(
    params=none, n_features_var='N_FEATURES', feature_set_var='FEATURES'
) %}
    {# Boilerplate for feature number definition.

    PARAMETERS
    ----------
    params : dict
        Parameters of the model.
    n_feature_var : str
        The variable name of the feature array length. Default is 'N_FEATURES'.
    feature_set_var : str
        The variable name of the feature index set: Default is 'FEATURES'.

    USAGE
    -----
    Only fixed domain features:
        {% call feature_set() %}
            N_FEATURE_SET_1 + N_FEATURE_SET_2 + 5
        {% endcall %}

    Only model-dependent features:
        {{ call feature_set(params) }}

    Combination of both:
        {% call feature_set(params) %}
            N_FEATURE_SET_1 + N_FEATURE_SET_2 + 5
        {% endcall %}
    #}

    {% if caller is defined %}
        int: {{ n_features_var }} = {{ caller() }}
    {% else %}
        int: {{ n_features_var }} = 0
    {% endif %}
    {% if params is not none and 'features' in params and params.features is not none %}
        + {{ params.features|length }}
    {% endif %} ;
    set of int: {{ feature_set_var }} = 1 .. {{ n_features_var }};

{% endmacro %}


{% macro features(
    params=none, feature_var='phi', feature_set_var='FEATURES',
    feature_type=none
) %}
    {# Boilerplate for features definition.

    PARAMETERS
    ----------
    params : dict
        Parameters of the model.
    feature_var : str
        The variable name of the feature array. Default is 'phi'.
    feature_set_var : str
        The variable name of the feature index set: Default is 'FEATURES'.
    feature_type : str
        The type of the features. Default is FLOAT_SET.

    USAGE
    -----
    Only fixed domain features:
        {% call features() %}
            % Your features definition, e.g.
            % [ feature1, feature2 ] ++ [ feature3 ]
        {% endcall %}

    Only model-dependent features:
        {{ call features(params) }}

    Combination of both:
        {% call features(params) %}
            % Your features definition, e.g.
            % [ feature1, feature2 ] ++ [ feature3 ]
        {% endcall %}
    #}

    {% if feature_type is none %}
        {% set feature_type = FLOAT_SET %}
    {% endif %}

    {% if caller is defined %}
        array[{{ feature_set_var }}] of var {{ feature_type }}: {{ feature_var }} = {{ caller() }}
    {% else %}
        array[{{ feature_set_var }}] of var {{ feature_type }}: {{ feature_var }} = []
    {% endif %}
    {% if params is not none and 'features' in params and params.features is not none and params.features|length > 0 %}
        ++ [
        {% for feature in params.features %}
            {{ feature }}
        {% endfor %}
        ]
    {% endif %} ;

{% endmacro %}


{% macro linear_model(
    problem, params=none, n_features=none, n_features_var='N_FEATURES',
    feature_var='phi', feature_set_var='FEATURES', feature_type=none,
    discretize=False, factor=100, score_var='score',
    allowed=('phi', 'map', 'loss_augmented_map')
) %}
    {# Boilerplate for defining a linear model.

    PARAMETERS
    ----------
    problem : str in ['phi', 'n_features', 'map', 'loss_augmented_map']
        The problem to solve. This parameter is usually passed by the Python
        domain class.
    params : dict
        Parameters of the model.
    n_features : str
        The number of feautures (or a fomula to compute it).
    n_feature_var : str
        The variable name of the feature array length. Default is 'N_FEATURES'.
    feature_var : str
        The variable name of the feature array. Default is 'phi'.
    feature_set_var : str
        The variable name of the feature index set: Default is 'FEATURES'.
    feature_type : str
        The type of the features. Default is FLOAT_SET.
    discretize : bool
       Wheter to discretize the weight vector and the scoring function. Use only
       if feature_type and loss_type are int. Default 'False'.
    factor : int
        The pre-multiplicative factor before discretization.
    score_var : str
        The variable name of the score to be used for inference (dot product
        between weights and features). Default 'score'.
    allowed : tuple
        Allowed problems for this model.

    USAGE
    -----
        {% call linear_model(problem, params, n_features='20') %}
            % Your features definition, e.g.
            % [ feature1, feature2 ] ++ [ feature3 ]
        {% endcall %}
    #}

    {% if n_features is not none %}
        {% call feature_set(params, n_features_var, feature_set_var) %}
            {{ n_features }}
        {% endcall %}
    {% endif %}

    {% if problem in allowed  %}

        {% if feature_type is none %}
            {% if discretize %}
                {% set feature_type = INT_SET %}
            {% else %}
                {% set feature_type = FLOAT_SET %}
            {% endif %}
        {% endif %}

        {% if caller is defined %}
            {% set feats = caller() %}
            {% call features(params, feature_var, feature_set_var, feature_type) %}
                {{ feats }}
            {% endcall %}
        {% endif %}

        {% if problem != 'phi' %}

            {% if 'w' in params and params.w is not none %}
                {% if discretize %}
                    {% set w = params.w|int(factor)|dzn %}
                {% else %}
                    {% set w = params.w|dzn %}
                {% endif %}
            {% else %}
                {% set w = '[0 | i in ' + feature_set_var + ']' %}
            {% endif %}

            array[{{ feature_set_var }}] of {{ feature_type }}: w = {{ w }};
            var {{ feature_type }}: {{ score_var }} = sum(i in {{ feature_set_var }})(w[i] * {{ feature_var }}[i]);

        {% endif %}

    {% endif %}

{% endmacro %}
